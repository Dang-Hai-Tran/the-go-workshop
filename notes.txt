ch05
When the first letter of the function name is in lowercase, then the function is not exportable outside of a package. This means they are private and cannot be called from outside the package. They can only be called within the package.Keep this in mind when you use camelCase naming convention. If you want your function to be exportable, the first letter of the function name must be capitalized.
Function signature: Though not listed in the preceding code snippet, a function signature is a term that references the input parameters combined with the return types. Both of those units make up a function signature.Often, when you define the function signature when it is being used by others, you want to strive to not make changes to it as this can adversely impact your code and the code of others.
A variadic function is a function that accepts a variable number of argument values. It is good to use a variadic function when the number of arguments of a specified type is unknown.
func f(parameterName …Type)
The preceding function is an example of what a variadic function looks like. The three dots (…) in front of the type is called a pack operator. The pack operator is what makes it a variadic function. It tells Go to store all the arguments of Type into parameterName. The variadic variable can accept zero or more variables as the argument.
Variadic functions can have other parameters. However, if your function requires multiple parameters, the variadic parameter must be the last parameter in the function. Also, there can only be one variadic variable per function.
The defer statement defers the execution of a function until the surrounding function returns.

ch06
It is Go idiomatic to evaluate the error value for functions or methods that return an error. It is generally bad practice to not handle an error that is returned from the function. An error when returned and ignored can lead to lots of wasted debugging efforts. It can also cause unforeseen consequences in your program. If the value is not nil, then we have an error and must decide how we want to handle it.
Go provides us with the ability to regain control after panic has occurred. Recover is a function that is used to regain control of a panicking Goroutine.
The recover() function is only useful inside a deferred function. As you may recall, a deferred function gets executed before the encompassing function terminates. Executing a call to the recover() function inside a deferred function stops the panicking by restoring normal execution. If the recover() function is called outside a deferred function, it will not stop the panicking.

ch07
Interfaces in other programming languages implement an interface explicitly. Explicit implementation means that the programming language directly and clearly states that this object is using this interface.In Go, interfaces are implemented implicitly. This means that a type will implement the interface by having all the methods and their signature of the interface.